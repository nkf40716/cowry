import scala.collection.mutable.ArrayBuffer 

object HelloWorld {
  def main(args: Array[String]): Unit = {
    println("Hello, world!")

    val y = ArrayBuffer(0,1,1,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,1,1,0,1,0,0,0,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0).map(_.toDouble)
    val yhat = ArrayBuffer(0.3220003682714654,0.038741098734104584,0.9475144095847454,0.585435198345847,0.8261732334695583,0.2820217656275765,0.16332171739454848,0.08552671773862752,0.1922275356954103,0.662338957920566,0.4419605575890809,0.3503736381152759,0.8016364027513095,0.7994574954188995,0.8703738106179265,0.46993494101339506,0.9643081050238659,0.12587310006846153,0.33822629442950713,0.9570407877419848,0.23348553670090744,0.656724065666452,0.49725965872392397,0.6666479561485581,0.7721281266775345,0.13375506498757006,0.10063067213623367,0.3206835183239499,0.8781594903750182,0.19186599471676247,0.958186834936221,0.3736486641462273,0.5356778572654957,0.8865039878694548,0.5322656274417272,0.9216034510148567,0.8002559713810874,0.3598547798515702,0.26925475059802306,0.29969288685343587,0.5908735528330968,0.4757751023375314,0.9095782630529375,0.00604576823252545,0.3088154121372584,0.9699768433856732,0.6954761198879086,0.6907773870938866,0.9609236182145937,0.872386406282165,0.02439767289002548,0.9917998643552083,0.8749630189371982,0.6093845706512127,0.9212302487591976,0.5321136386114605,0.30004434089303433,0.19711210633818488,0.46074047848936706,0.44663416735650996,0.48225466780391457,0.9172761818574959,0.810977095814539,0.9370325022537763,0.31547275975829603,0.5596792928882397,0.6485691507583619,0.8073975647647764,0.31262270400783443,0.2813134285149467,0.7332668046116778,0.8620405248355291,0.5709032170115883,0.40730804080080074,0.3499234707147547,0.6978028530860311,0.618717993240803,0.22297911157524763,0.46681469270602705,0.8852940586307998,0.5515766136605065,0.9118822116784564,0.15561000903691946,0.9307890621208814,0.9261632746992261,0.6242882087586616,0.3606407622916097,0.3124953453562034,0.07155201779357878,0.15164475505793684,0.44835331104094145,0.27010982107766957,0.646565117813219,0.9925913854014632,0.5731858267376513,0.035394951498578964,0.8427647905982201,0.9533266430256307,0.34313137782986036,0.4131443401487612)
    println(auc(yhat, y))
  }

  def get_y_by_yhat_rank(yhat: ArrayBuffer[Double], y: ArrayBuffer[Double]) = {
    //        val ypairs = ypair
    val yhat_sorted: ArrayBuffer[Double] = ArrayBuffer()
    val y_sorted: ArrayBuffer[Double] = ArrayBuffer()

    // yhat, y
    var pairs: ArrayBuffer[(Double, Double)] = ArrayBuffer()

    var i = 0
    for (yi <- y) {
      pairs.append((yhat(i), yi))
      i += 1
    }

    //println("Before sort: " + pairs.mkString(","))
    pairs = pairs.sortBy(_._1).reverse
    //println("After sort: " + pairs.mkString(","))

    for (p <- pairs) {
      yhat_sorted.append(p._1)
      y_sorted.append(p._2)
    }

    // return sorted y.
    (yhat_sorted, y_sorted)
  }

  def auc(yhat: ArrayBuffer[Double], y: ArrayBuffer[Double]): Double = {

    val (yhat_sorted, y_sorted) = get_y_by_yhat_rank(yhat, y)
    val auc = _auc(y_sorted)

    auc
  }

  def _auc(y: ArrayBuffer[Double]): Double = {
    var i = 0

    var positiveSamples = 0
    var negetiveSamples = 0

    for (yy <- y) {
      if (yy == 1) {
        positiveSamples += 1
      } else if (yy == 0) {
        negetiveSamples += 1
      }
    }

    // 1p 1n -> 1
    // 1p 0n -> 0
    // 0p 0n -> 0
    val total_area = positiveSamples * negetiveSamples
    if (total_area == 0) {
      return 0.5
    }

    var h = 0.0
    var w = 0.0
    var area = 0.0

    for (yy <- y) {
      if (yy == 1) {
        h += 1
        //println("yy=1")
        //println("h:" + h.toString + ", w:" + w.toString + ", a:" + area.toString)
      } else {
        w += 1
        area += h
        //println("yy=0")
        //println("h:" + h.toString + ", w:" + w.toString + ", a:" + area.toString)
      }
      i += 1
    }

    // 1p 1n -> 1
    // area += h

    area / total_area
  }

}